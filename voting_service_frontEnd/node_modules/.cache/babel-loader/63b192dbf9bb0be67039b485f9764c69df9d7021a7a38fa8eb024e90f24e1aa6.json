{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\fsidn\\\\Downloads\\\\voting_service_frontEnd\\\\src\\\\pages\\\\Vote\\\\index.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport api from '../../services/api';\nimport { getUserId } from '../../utils/auth';\nimport { VoteContainer, Title, OptionsList, Option, SubmitButton } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VotePage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const [voteSession, setVoteSession] = useState(null);\n  const [selectedOption, setSelectedOption] = useState('');\n  useEffect(() => {\n    const fetchVoteSession = async () => {\n      try {\n        const {\n          data\n        } = await api.get(`/api/votes_session/${id}`);\n        setVoteSession(data);\n      } catch (error) {\n        alert('Erro ao carregar votação!');\n        navigate('/dashboard');\n      }\n    };\n    fetchVoteSession();\n  }, [id, navigate]);\n  const handleVote = async () => {\n    if (!selectedOption) {\n      alert('Selecione uma opção!');\n      return;\n    }\n    try {\n      await api.post(`/api/votes/${id}/cast`, {\n        userId: getUserId(),\n        option: selectedOption\n      });\n      alert('Voto registrado com sucesso!');\n      navigate('/dashboard');\n    } catch (error) {\n      alert('Erro ao votar!');\n    }\n  };\n  if (!voteSession) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Carregando...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 28\n  }, this);\n  return /*#__PURE__*/_jsxDEV(VoteContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: voteSession.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(OptionsList, {\n      children: voteSession.options.map(option => /*#__PURE__*/_jsxDEV(Option, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"vote\",\n          value: option,\n          onChange: () => setSelectedOption(option)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), option]\n      }, option, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n      onClick: handleVote,\n      children: \"Confirmar Voto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(VotePage, \"6sJdXfCd61RycCwZM3JnMSuM5gc=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = VotePage;\nexport default VotePage;\nvar _c;\n$RefreshReg$(_c, \"VotePage\");","map":{"version":3,"names":["useEffect","useState","useParams","useNavigate","api","getUserId","VoteContainer","Title","OptionsList","Option","SubmitButton","jsxDEV","_jsxDEV","VotePage","_s","id","navigate","voteSession","setVoteSession","selectedOption","setSelectedOption","fetchVoteSession","data","get","error","alert","handleVote","post","userId","option","children","fileName","_jsxFileName","lineNumber","columnNumber","title","options","map","type","name","value","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/fsidn/Downloads/voting_service_frontEnd/src/pages/Vote/index.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { useParams, useNavigate } from 'react-router-dom'\nimport api from '../../services/api'\nimport { getUserId } from '../../utils/auth'\nimport {\n  VoteContainer,\n  Title,\n  OptionsList,\n  Option,\n  SubmitButton\n} from './styles'\n\ninterface VoteSession {\n  id: number\n  title: string\n  options: string[]\n  startAt: string\n  endAt: string\n}\n\nconst VotePage = () => {\n  const { id } = useParams()\n  const navigate = useNavigate()\n  const [voteSession, setVoteSession] = useState<VoteSession | null>(null)\n  const [selectedOption, setSelectedOption] = useState('')\n\n  useEffect(() => {\n    const fetchVoteSession = async () => {\n      try {\n        const { data } = await api.get(`/api/votes_session/${id}`)\n        setVoteSession(data)\n      } catch (error) {\n        alert('Erro ao carregar votação!')\n        navigate('/dashboard')\n      }\n    }\n    fetchVoteSession()\n  }, [id, navigate])\n\n  const handleVote = async () => {\n    if (!selectedOption) {\n      alert('Selecione uma opção!')\n      return\n    }\n\n    try {\n      await api.post(`/api/votes/${id}/cast`, {\n        userId: getUserId(),\n        option: selectedOption\n      })\n      alert('Voto registrado com sucesso!')\n      navigate('/dashboard')\n    } catch (error) {\n      alert('Erro ao votar!')\n    }\n  }\n\n  if (!voteSession) return <p>Carregando...</p>\n\n  return (\n    <VoteContainer>\n      <Title>{voteSession.title}</Title>\n      <OptionsList>\n        {voteSession.options.map((option) => (\n          <Option key={option}>\n            <input\n              type=\"radio\"\n              name=\"vote\"\n              value={option}\n              onChange={() => setSelectedOption(option)}\n            />\n            {option}\n          </Option>\n        ))}\n      </OptionsList>\n      <SubmitButton onClick={handleVote}>Confirmar Voto</SubmitButton>\n    </VoteContainer>\n  )\n}\n\nexport default VotePage\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}